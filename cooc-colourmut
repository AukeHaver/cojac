#!/usr/bin/env python3
import os
import argparse
import json
import yaml


# parse command line
argparser = argparse.ArgumentParser(description="print coloured pretty table on terminal",
	epilog="see cooc-pubmut for a CSV file that can be imported into an article")
argparser.add_argument('-a', '--amplicons', metavar='YAML', required=True,
	type=str, dest='amp', help="list of queriy amplicons, from mutbamscan")
inputgroup = argparser.add_mutually_exclusive_group(required=True)
inputgroup.add_argument('-j', '--json', metavar='JSON',
	type=str, dest='json', help="results generated by mutbamscan")
inputgroup.add_argument('-y', '--yaml', metavar='YAML',
	type=str, dest='yaml', help="results generated by mutbamscan")
args = argparser.parse_args()


# load table
table={}

if args.json:
	assert os.path.isfile(args.json), f"cannot find result json file {args.json}"
	with open(args.json, 'rt') as jf:
		table=json.load(fp=jf)
elif args.yaml:
	assert os.path.isfile(args.yaml), f"cannot find result yaml file {args.yaml}"
	with open(args.yaml, 'rt') as yf:
		table=yaml.safe_load(yf)

assert len(table) > 0, "cannot succesfully load table"

# reuse stored amplicons
amplicon_nfo={ }

assert os.path.isfile(args.amp), f"cannot find amplicon file yaml file {args.yaml}"
with open(args.amp, 'rt') as yf:
	import numpy as np
	amp_str = yaml.load(yf, Loader=yaml.Loader)
	#amp_str = yaml.safe_load(yf)

amplicon_nfo = {
		a: ','.join([
				f"{p}{b}" if len(b) == 1 else (f"\u0394{p}-{p + len(b) - 1}" if  b == '-' * len(b) else f"{p}\u2192{b}")for p,b in aqu[4].items()
			]) for a,aqu in amp_str.items()
	}

### V3
# '76_IN1_IN3': '22917G,23012:C',
# '76_IN2': '22917G,22995A',
# '91_IN2': '27638C,27752T',
#
# '72_UK': '21765-21770Δ,21991-21993Δ',
# '78_UK': '23604A,23709T',
# '92_UK': '27972T,28048T,28111G',
# '93_UK': '28111G,28280-28280->CTA',

# '95_BR': '28877T,28878C',
# '71_BR': '21621A,21638T,21614T',

# '73_ZA': '22206G,22299T',
# '76_BR_ZA': '23012A,23063T',
# '77_EU': '23403G',

### V4
  #'75_om': '22578A,22673C,22674T,22679C',	# 22428, 22785
  #'76_om': '22679C,22813T,22882G,22898A,22992A,23013C',	# 22677, 23028
  #'77_om': '22992A,23013C,23040G,23048A,23055G,23202A',	# 22974, 23327
  #'78_om': '23525T,23599G',	#23246, 23611
  #'88_om': '26530G,26577G',	#26277, 26635

  #'76_IN2_AY42': '22917G,22995A', # 22677, 23028
  #'92_IN2': '27638C,27752T',	# 27473, 27826
  #'78_EU': '23403G',  # [23246, 23611

#  '93_mu': '27925A,28005T', #27726, 28082

# '71_BR': [21316, 21675, 21388, 21531, {21621: 'A', 21638: 'T', 21614: 'T'}],
# '72_BR': [21561, 21904, 21705, 21859, {21621: 'A', 21638: 'T', 21614: 'T'}],
# '73_BR': [21889, 22247, 21934, 22083, {21974: 'T', 22132: 'T'}],
# '76_BR': [22677, 23028, 22815, 22944, {22812: 'C', 23012: 'A'}],
# '96_BR': [28536, 28893, 28602, 28819, {28877: 'T', 28878: 'C'}],
# '97_BR': [28849, 29206, 28923, 29131, {28877: 'T', 28878: 'C'}],
# '72_C36': [21561, 21904, 21705, 21859, {21597: 'T', 21765: '------'}],
# '76_IN1_IN3': [22677, 23028, 22815, 22944, {22917: 'G', 23012: 'C'}],
# '77_UK': [22974, 23327, 23058, 23216, {23063: 'T', 23271: 'A'}],
# '78_UK': [23246, 23611, 23357, 23545, {23271: 'A', 23604: 'A'}],
# '79_UK': [23575, 23927, 23641, 23846, {23604: 'A', 23709: 'T'}],
# '93_UK': [27726, 28082, 27856, 27991, {27972: 'T', 28048: 'T'}],
# '94_UK': [28021, 28394, 28112, 28184, {28048: 'T', 28111: 'G', 28280: 'CTA'}],
# '77_BR_ZA': [22974, 23327, 23058, 23216, {23012: 'A', 23063: 'T'}],
# '29_ZA': [8619, 8990, 8721, 8914, {8660: 'T', 8964: 'T'}],
# '72_ZA': [21561, 21904, 21705, 21859, {21801: 'C', 21614: 'T'}],
# '74_ZA': [22113, 22474, 22277, 22398, {22206: 'G', 22299: 'T'}],
# '76_ZA': [22677, 23028, 22815, 22944, {22813: 'T', 23012: 'A'}],
# '73_AY42': [21889, 22247, 21934, 22083, {21995: 'C', 22227: 'T'}],
# '92_AY42': [27473, 27826, 27564, 27696, {27638: 'C', 27752: 'T'}],






#
# pretty print
#

l=max(len(k) for k in table)
print(f"{'':<{l}} ", end='')
for a in amplicon_nfo: print(f" {a :<26}", end='')
print(f"\n{'':<{l}}  ", end='')
for a,label in amplicon_nfo.items(): print(f"{label if len(label)<=27 else (label[:26]+chr(0x2026)) :<27.27}", end='')
print(f"\n{'sample:':<{l}} ", end='')
for a in amplicon_nfo: print(f"{'cov:' :>9}{'mut:' :>9}{'frq/%:' :>9}", end='')
print()

for sam,amplicons in table.items():
	print(f"{sam :>{l}} ", end='')

	for ampname in amplicon_nfo: # instead of `ampname,amp in amplicons.items():`, to keep order consistent with column titles.
		amp = amplicons[ampname]
        
		# get topmost
		sites_cnt_l=-1
		sites_cnt=0
		if amp['sites']: # empty ?
			(sites_cnt_l,sites_cnt)=list(amp['sites'].items())[-1]
		muts_cnt_l=-1
		muts_cnt=0
		if amp['muts']: # empty ?
			(muts_cnt_l,muts_cnt)=list(amp['muts'].items())[-1]

		# pretty print
		if sites_cnt:
			print(f"{sites_cnt :>9}",end='')
			if muts_cnt:
				if muts_cnt_l != sites_cnt_l:
					print(f"\x1b[33;1m{muts_cnt :>9}{f'({muts_cnt_l}/{sites_cnt_l})' :>9}\x1b[0m",end='')
				else:
					print(f"\x1b[32;1m{muts_cnt :>9}{100*muts_cnt/sites_cnt :7.2f}%{sites_cnt_l}\x1b[0m",end='')
			else:
				print(f"\x1b[31;1m{'N/A' :>9}{'N/A' :>9}\x1b[0m", end='')
		else:
			print(f"\x1b[35;1m{'N/A' :>9}{'N/A' :>9}{'N/A' :>9}\x1b[0m", end='')

	print()


